#pragma once

std::vector<std::tuple<eCommands, std::string>> factor_cyc = {
        {eCommands::Label,  "factor"},
        {eCommands::PushR,  "ax"},
        {eCommands::PushR,  "bx"},
        {eCommands::Mul,    ""},
        {eCommands::PopR,   "ax"},
        {eCommands::Blank,  ""},
        {eCommands::PushR,  "bx"},
        {eCommands::Push,   "1"},
        {eCommands::Add,    ""},
        {eCommands::PopR,   "bx"},
        {eCommands::Blank,  ""},
        {eCommands::Ret,    ""},
        {eCommands::Blank,  ""},
        {eCommands::Begin,  ""},
        {eCommands::Push,   "1"},
        {eCommands::Push,   "1"},
        {eCommands::Blank,  ""},
        {eCommands::PopR,   "ax"},
        {eCommands::PopR,   "bx"},
        {eCommands::Blank,  ""},
        {eCommands::In,     ""},
        {eCommands::PopR,   "dx"},
        {eCommands::Blank,  ""},
        {eCommands::Label,  "start"},
        {eCommands::Call,   "factor"},
        {eCommands::Blank,  ""},
        {eCommands::PushR,  "dx"},
        {eCommands::PushR,  "bx"},
        {eCommands::Blank,  ""},
        {eCommands::JumpLE, "start"},
        {eCommands::PushR,  "ax"},
        {eCommands::Out,    ""},
        {eCommands::End,    ""}
};

std::vector<std::tuple<eCommands, std::string>> factor_rec = {
        {eCommands::Label, "factor"},
        {eCommands::PopR,  "cx"},
        {eCommands::PushR, "cx"},
        {eCommands::Push,  "1"},
        {eCommands::Sub,   ""},
        {eCommands::Blank, ""},
        {eCommands::Push,  "0"},
        {eCommands::JumpG, "return"},
        {eCommands::Pop,   ""},
        {eCommands::Blank, ""},
        {eCommands::PushR, "cx"},
        {eCommands::PushR, "ax"},
        {eCommands::Mul,   ""},
        {eCommands::PopR,  "ax"},
        {eCommands::Blank, ""},
        {eCommands::Jump,  "factor"},
        {eCommands::Blank, ""},
        {eCommands::Label, "return"},
        {eCommands::Ret,   ""},
        {eCommands::Blank, ""},
        {eCommands::Begin, ""},
        {eCommands::Push,  "1"},
        {eCommands::PopR,  "ax"},
        {eCommands::Blank, ""},
        {eCommands::In,    ""},
        {eCommands::Blank, ""},
        {eCommands::Call,  "factor"},
        {eCommands::Blank, ""},
        {eCommands::PushR, "ax"},
        {eCommands::Out,   ""},
        {eCommands::End,   ""}
};